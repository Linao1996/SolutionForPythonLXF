import pandas



food_info = pandas.read_csv('food_info.csv')
print(type(food_info))
first_twenty = food_info.head(20)
print(food_info.dtypes)



num_rows = food_info.shape[0]
last_rows = food_info.loc[num_rows-5:num_rows-1] #".loc[] will include both the start and the end row."
print(last_rows)
print(food_info.loc[[2,5,10]])



saturated_fat = food_info['FA_Sat_(g)']
cholesterol = food_info['Cholestrl_(mg)']



strlist = ['Selenium_(mcg)','Thiamin_(mg)']
selenium_thiamin = food_info[strlist]



column_names = food_info.columns.tolist()
gram_columns = [ x for x in column_names if x.endswith('(g)')]
gram_df = food_info[gram_columns]
print(food_info.columns)
print(food_info.head(2))


import pandas as pd
import numpy as np

s = pd.Series([1, 3, -5, 6, 8], index=['name', 'gender', 'age', 'education',
                                       'occupation'])  # or without index parameter,using 0,1,2...by default
# print(s.values)
# print(s.index)
# print(s[['name','age','occupation']])
# print(s[s > 0])
# print(s*2)
# print(np.exp(s))


sdict = {'Ohio': 1, 'Texas': 2, 'Oregon': 3, 'Utah': 50}  # using dict to create a pd Series type
s2 = pd.Series(sdict)
# print(s2)


sdata = ['California', 'Ohio', 'Oregon', 'Texas']
s3 = pd.Series(sdict, index=sdata)  # using dict as its first parameter
# print(s3)
# print(s3.isnull())


s4 = s2 + s3  # alignment is a very important property
# print(s4)


s4.name = 'Population'
s4.index.name = 'State'
# print(s4.name)


data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada'], 'year': [2000, 2001, 2002, 2001, 2002],
        'pop': [1.5, 1.7, 3.6, 2.4, 2.9]}
frame = pd.DataFrame(data)
# print(frame)#order by key (pop state year)


frame = pd.DataFrame(data, columns=['year', 'state', 'pop'])
# print(frame)


frame2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'], index=['one', 'two', 'three', 'four', 'five'])
# print(frame2)


fp = frame2['year']
# print(fp)
# print(type(fp))

frame2['debt'] = [16.5, 18.2, 12.4, 18.2, 20.3]
# print(frame2)

frame2['debt'] = np.arange(5.)
# print(frame2)

val = pd.Series([-1.2, -1.5, -1.7], index=['one', 'three', 'five'])
frame2['debt'] = val
# print(frame2)


frame2['eastern'] = frame2.state == 'Ohio'
# print(frame2)


del frame2['eastern']
# print(frame2)


pop = {
    'Nevada': {2001: 2.4, 2002: 2.9},
    'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}
}
frame3 = pd.DataFrame(pop)
# print(frame3)
# print(frame3.T)

frame3.index.name = 'year'
frame3.columns.name = 'state'
# print(frame3)

# print(frame3.values)

index3 = frame3.index
# print(index3)

# print('Ohio' in frame3.columns)
# print(2001 in frame3.index)

obj = pd.Series([4.5, 7.2, 3.2, 9.8], index=['d', 'c', 'b', 'e'])
# print(obj)

obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e'], fill_value='0')
# print(obj2)

obj3 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])

# print(obj3.reindex(range(6), method='pad'))

frame4 = pd.DataFrame(np.arange(9).reshape((3, 3)), index=['a', 'c', 'd'], columns=['Ohio', 'Texas', 'California'])
# print(frame4)
frame4 = frame4.reindex(index=['a', 'b', 'c', 'd'], columns=['Texas', 'Utah', 'California'])
# equals frame4 = frame4.ix(['a','b','c','d'],['Texas','Utah','California'])
# print(frame4)


obj4 = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])
obj4 = obj.drop(['c', 'd'])
# print(obj)




frame5 = pd.DataFrame(np.arange(16).reshape((4, 4)), index=['Ohio', 'Colorado', 'Utah', 'New York'],
                      columns=['one', 'two', 'three', 'four'])
frame5 = frame5.drop(['two', 'three'], axis=1)
# print(frame5)



obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])
# print(obj[1:3])  # excusive of end
# print(obj['b':'c'])  # inclusive of end !!!!



frame6 = pd.DataFrame(np.arange(16).reshape((4, 4)), index=['Ohio', 'Colorado', 'Utah', 'New York'],
                      columns=['one', 'two', 'three', 'four'])
# print(frame6)
# print(frame6[['two', 'one']])#column
# print(frame6[1:3]) #row ,it does not make any sense, but... ,and note that this kind of index is excusive of end
# print(frame6[frame6['three'] > 9])
# print(frame6.ix['Colorado', ['two', 'three']])
# print(frame6.ix[frame6.three > 5, :3])

s1 = pd.Series([7.3, -2.5, 3.4, 1.5], index=['a', 'c', 'd', 'e'])
s2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1], index=['a', 'c', 'e', 'f', 'g'])
# print(s1)
# print(s2)
s3 = s1 + s2
# print(s3)
s3[s3.isnull()] = 999
# print(s3)

df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'), index=['Ohio', 'Texas', 'Colorado'])
df2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('cde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])
df3 = df1 + df2
# print(df3)
df4 = df1.add(df2, fill_value=0)
# print(df4)


arr = np.arange(12.).reshape((3, 4))
arr0 = arr[0]  # the first row
# print(arr - arr0) #broadcast!


frame7 = pd.DataFrame(np.random.randn(4, 3), columns=list('cde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])
# print(frame7)
# print(np.abs(frame7))

f = lambda x: x.max() - x.min()


# print(frame7.apply(f))  # column
# print(frame7.apply(f, axis=1))  # row


def f2(x):
    return pd.Series([x.max(), x.min()], index=['min', 'max'])


# print(frame7.apply(f2))
format = lambda x: '%.2f' % x
# print(frame7.applymap(format))
s7 = frame7['e']
# print(s7.map(format))

obj7 = pd.Series(range(4), index=['d', 'a', 'b', 'c'])
# print(obj7)
obj7 = obj7.sort_index()
# print(obj7)

frame8 = pd.DataFrame(np.arange(8).reshape((2, 4)), index=['three', 'one'], columns=list('dabc'))

# print(frame8)
# print(frame8.sort_index())  # based on index
# print(frame8.sort_index(axis=1, ascending=False))  # based on index(columns),descending.


frame9 = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})
frame9 = frame9.sort_values(by='b')  # based on value
# print(frame9)

obj9 = pd.Series([1, 2, 3, 4, 5], index=['a', 'a', 'b', 'e', 'd'])  # index can duplicate!
a = obj.index.is_unique
# print(a)

a1 = obj9['a']
# print(a1)
# a2 = obj9['c']
# print(a2)

df5 = pd.DataFrame([[1.4, np.nan], [7.1, -4.5], [np.nan, np.nan], [0.75, -1.3]], index=['a', 'b', 'c', 'd'],
                   columns=['one', 'two'])
# print(df5)
# print(df5.sum())
# 
# print(df5.sum(axis=1))
# print(df5.idxmax())
# print(df5.cumsum())
# print(df5.describe())


import pandas as pd
import numpy as np
import csv

from pandas_datareader import data, wb

frame = pd.DataFrame(np.random.randn(10, 10), index=list('abcdefghij'),
                     columns=list('abcdefghij'))
# print(frame.corr())
# print(frame.cov())
# print(frame.corrwith(frame.j))

obj = pd.Series(list('cadaabbcc'))
uniques = obj.unique()
# print(uniques)
# print(obj.value_counts())
# print(pd.value_counts(obj.values,sort = True))

frame2 = pd.DataFrame({'Qu1': [1, 3, 4, 3, 4], 'Qu2': [2, 3, 1, 2, 3], 'Qu3': [1, 5, 2, 4, 4]})
# print(frame2)
result = frame2.apply(pd.value_counts).fillna(0)
# print(result)

string_data = pd.Series(['aardvak', 'artichoke', np.nan, 'avocado'])
# print(string_data.isnull())
string_data[0] = None
# print(string_data)
# print(string_data.isnull())# None is regarded as NA

data = pd.Series([1, np.nan, 3.5, np.nan, 7])
# print(data.dropna())
# print(data[data.notnull()]) #effect is the same

frame2 = pd.DataFrame(
    {'Qu1': [1, np.nan, 4, 3, 4], 'Qu2': [2, 3, 1, 2, 3], 'Qu3': [np.nan, np.nan, np.nan, np.nan, np.nan]})

cleaned = frame2.dropna()  # empty DataFrame,since dropna disgard all rows that contain NA
cleaned2 = frame2.dropna(how='all')
# print(frame2)
# print(cleaned2)
cleaned3 = frame2.dropna(axis=1)
# print(cleaned3)


df = pd.DataFrame(np.random.randn(7, 3))
df.ix[:4, 1] = np.nan
df.ix[:2, 2] = np.nan
# print(df)
cleaned4 = df.dropna(thresh=2)  # keep only the rows with at least 2 non-na value
# print(cleaned4)

df2 = df.fillna(0)
# print(df2)

df3 = df.fillna({1: 0.5, 2: -1})
# print(df3)

df4 = df.fillna(method='ffill')
# print(df)
# print(df4)

df5 = df.fillna(data.mean())
# print(df5)

data = pd.Series(np.random.randn(10), index=[list('aaabbbccdd'), [1, 2, 3, 1, 2, 3, 1, 2, 2, 3]])
# print(data.index)
# print(data)
# print(data['b'])
# print(data['b':'c'])
# print(data.ix[['b','d']])
# print(data[:,2])

df = data.unstack()
# print(type(df))
# print(df)

df = pd.read_csv('file/ex1.csv')
# print(df)

df = pd.read_csv('file/ex2.csv')
# print(df) #using the first line as header which is wrong

df = pd.read_csv('file/ex2.csv', names=['a', 'b', 'c', 'd', 'message'])
# print(df)

df = pd.read_csv('file/ex2.csv', skiprows=[0, 2, 3])
# print(df)

df = pd.read_csv('file/ex3.csv')
# print(df)
# content of ex3.csv
# 1 something,a,b,c,d,message
# 2 one,1,2,3,4,NA
# 3 two,5,6,,8,world
# 4 three,NULL,10,11,12,foo

df = pd.read_csv('file/ex3.csv', nrows=2)
# print(df)

df = pd.read_csv('file/ex3.csv')
df.to_csv('file/ex4.csv', na_rep='NULL', index=False, header=False)
df.to_csv('file/ex4.csv', na_rep='NULL', index=False, columns=['b', 'c'])

# with open('file/ex5.csv', 'r') as f:
#     reader = csv.reader(f)
#     for line in reader:
#         print(line)

lines = list(csv.reader(open('file/ex5.csv')))
header, values = lines[0], lines[1:]
# print(values)

data_dict = {h: v for h, v in zip(header, zip(*values))}  # must understand this line
print(data_dict)


class my_dialect(csv.Dialect):
    lineterminator = '\n'
    delimiter = ';'
    quotechar = '"'


# with open('file/ex6.csv', 'w') as f:
#     writer = csv.writer(f, dialect=my_dialect)
#     writer.writerow = (('one', 'two', 'three'))
#     writer.writerow = (('1', '2', '3'))
#     writer.writerow = (('4', '5', '6'))
#     writer.writerow = (('7', '8', '9'))

# xls_filed = pd.ExcelFile('file/2017.5.xls')
xls_file = pd.read_excel('file/2017.5.xls')
# print(xls_file)

import os
def find(key, road):
    for f in os.listdir(road):
        file_path = os.path.join(road, f)
        if not os.access(file_path, os.R_OK):
            continue
        if os.path.isfile(file_path) and key in file_path:
            print(file_path)
        elif os.path.isdir(file_path):
            find(key, file_path)


a = os.getcwd()
# find('xls', '/')
